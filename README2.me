# üîí HUSHBOX Enterprise - Documentaci√≥n T√©cnica Completa




## üîê Arquitectura de Seguridad
### Flujo de Encriptaci√≥n
```mermaid
sequenceDiagram
    Usuario->>Aplicaci√≥n: Ingresa mensaje + passphrase
    Aplicaci√≥n->>Crypto: Validar passphrase (zxcvbn)
    Crypto->>Crypto: Generar salt (32B) + IV (16B)
    Crypto->>Crypto: Derivar clave (PBKDF2-HMAC-SHA256)
    Crypto->>Crypto: Comprimir mensaje (pako DEFLATE)
    Crypto->>Crypto: Encriptar (AES-256-GCM)
    Crypto->>QR: Convertir a Base64
    QR->>UI: Generar c√≥digo QR animado
    UI->>Usuario: Mostrar QR seguro
```

### Par√°metros Criptogr√°ficos
| Par√°metro              | Valor                  | Descripci√≥n                          |
|------------------------|------------------------|--------------------------------------|
| Algoritmo              | AES-256-GCM            | Cifrado autenticado                  |
| Modo                   | Galois/Counter Mode    | Protecci√≥n integridad                |
| Iteraciones PBKDF2     | 310,000                | Resistencia fuerza bruta             |
| Longitud salt          | 32 bytes               | Unicidad por mensaje                 |
| Longitud IV            | 16 bytes               | Vector de inicializaci√≥n             |
| Tama√±o tag             | 128 bits               | Autenticaci√≥n GCM                    |
| Compresi√≥n             | DEFLATE (nivel 6)      | Para mensajes >100 caracteres        |

---



---


---

## üìä Especificaciones T√©cnicas

### 1. Requisitos Passphrase
| Par√°metro               | Valor                     |
|-------------------------|---------------------------|
| Longitud m√≠nima         | 12 caracteres             |
| Complejidad             | 4 de 4 (zxcvbn)           |
| Caracteres √∫nicos       | >70% de longitud          |
| Tipos requeridos        | A-Z, a-z, 0-9, s√≠mbolos  |

### 2. Proceso de Desencriptaci√≥n
```mermaid
flowchart TD
    A[Iniciar desencriptaci√≥n] --> B{QR v√°lido?}
    B -->|S√≠| C[Ingresar passphrase]
    B -->|No| D[Error: QR inv√°lido]
    C --> E{Passphrase correcta?}
    E -->|S√≠| F[Desencriptar y mostrar]
    E -->|No| G[Contador intentos++]
    G --> H{Intentos > 5?}
    H -->|S√≠| I[Bloquear temporalmente]
    H -->|No| C
```

### 3. Seguridad Avanzada
```javascript
// Borrado seguro de buffers
cryptoUtils.secureWipe = (buffer) => {
  if (buffer instanceof ArrayBuffer || buffer instanceof Uint8Array) {
    const wipeArray = new Uint8Array(buffer);
    for (let i = 0; i < wipeArray.length; i++) {
      wipeArray[i] = 0; // Sobrescribe con ceros
    }
  }
};

// Comparaci√≥n en tiempo constante
cryptoUtils.constantTimeCompare = (a, b) => {
  // Implementaci√≥n resistente a timing attacks
};
```

---

## üöÄ Rendimiento y Optimizaciones

### T√©cnicas Implementadas
1. **Compresi√≥n Selectiva**:  
   Solo para mensajes >100 caracteres
   ```javascript
   if (message.length > CONFIG.COMPRESSION_THRESHOLD) {
     dataToEncrypt = pako.deflate(dataToEncrypt, { level: 6 });
   }
   ```

2. **Lazy Loading**:  
   Carga din√°mica de bibliotecas:
   ```html
   <script defer src="https://cdn.jsdelivr.net/npm/pako@2.1.0/dist/pako.min.js">
   ```

3. **Web Workers**:  
   Operaciones criptogr√°ficas en segundo plano

4. **Caching PWA**:  
   ```json
   // manifest.json
   "start_url": "/",
   "display": "standalone",
   "background_color": "#1a1a1a"
   ```

---

## üîÑ Flujos de Trabajo Empresariales

### 1. Comunicaci√≥n Segura entre Departamentos
```mermaid
sequenceDiagram
    Departamento A->>HUSHBOX: Encriptar informe
    HUSHBOX-->>Departamento A: Generar QR
    Departamento A->>Canal Seguro: Enviar passphrase (Signal/Email)
    Departamento A->>Teams/Slack: Compartir QR
    Teams/Slack-->>Departamento B: Recibir QR
    Departamento B->>HUSHBOX: Escanear QR
    Departamento B->>Canal Seguro: Obtener passphrase
    HUSHBOX-->>Departamento B: Desencriptar informe
```

### 2. Backup de Credenciales
```mermaid
flowchart LR
    A[Credenciales] --> B[Encriptar con HUSHBOX]
    B --> C[Imprimir QR]
    C --> D[Caja fuerte f√≠sica]
    D --> E[Recuperaci√≥n: Escanear + passphrase]
```

### 3. Auditor√≠a de Seguridad
```mermaid
journey
    title Ciclo de Auditor√≠a
    section Mensaje
      Generar: 5: Dev
      Encriptar: 8: Security
    section Transporte
      Transmitir: 5: Network
    section Recepci√≥n
      Desencriptar: 8: Security
      Verificar: 5: Auditor
```

---

## üìù Manual de Usuario

### Pasos B√°sicos:
1. **Encriptar mensaje**:
   - Ingresar passphrase (12+ caracteres)
   - Escribir mensaje (hasta 10,000 caracteres)
   - Click "Encrypt"
   - Compartir QR (PDF, imagen, copiar)

2. **Desencriptar**:
   - Escanear QR (c√°mara o subir imagen)
   - Ingresar passphrase
   - Click "Decrypt"

3. **Gesti√≥n de Historial**:
   - Exportar/Importar (CSV encriptado)
   - Borrar historial local

### Funciones Avanzadas:
| Comando                 | Acci√≥n                                  |
|-------------------------|-----------------------------------------|
| Click en icono ojo      | Mostrar/ocultar passphrase              |
| Click en icono dado     | Generar passphrase segura               |
| Ctrl+Shift+E            | Enfocar campo mensaje                   |
| Escape                  | Cerrar modales                          |

---

## üìö Ap√©ndices T√©cnicos

### 1. Configuraci√≥n CSP
```html
<meta http-equiv="Content-Security-Policy" 
      content="default-src 'self'; 
               script-src 'self' https://cdn.jsdelivr.net 'wasm-unsafe-eval';
               style-src 'self' https://cdnjs.cloudflare.com 'unsafe-inline';
               font-src https://cdnjs.cloudflare.com;
               img-src 'self' data:;">
```

### 2. Dependencias Cr√≠ticas
| Biblioteca   | Versi√≥n | Uso                           | Integridad SRI                          |
|--------------|---------|-------------------------------|------------------------------------------|
| **pako**     | 2.1.0   | Compresi√≥n DEFLATE            | `sha256-7eJpOkpqUSa501ZpBis1jsq2rnubhqHPMC/rRahRSQc=` |
| **qrcode**   | 1.5.1   | Generaci√≥n QR                 | `sha256-7GTYmrMJbc6AhJEt7f+fLKWuZBRNDKzUoILCk9XQa1k=` |
| **jsqr**     | 1.4.0   | Decodificaci√≥n QR             | `sha256-TnzVZFlCkL9D75PtJfOP7JASQkdCGD+pc60Lus+IrjA=` |
| **jspdf**    | 2.5.1   | Exportaci√≥n PDF               | `sha256-mMzxeqEMILsTAXYmGPzJtqs6Tn8mtgcdZNC0EVTfOHU=` |
| **zxcvbn**   | 4.4.2   | Validaci√≥n passphrase         | `sha256-9CxlH0BQastrZiSQ8zjdR6WVHTMSA5xKuP5QkEhPNRo=` |

### 3. M√©tricas de Rendimiento
| Operaci√≥n          | Tiempo Promedio | Uso CPU |
|--------------------|-----------------|---------|
| Encriptaci√≥n (1KB) | 120ms           | 15%     |
| Desencriptaci√≥n    | 180ms           | 18%     |
| Generaci√≥n QR      | 80ms            | 8%      |
| Escaneo QR (c√°mara)| 16ms/frame      | 22%     |

---

## üåç Informaci√≥n Corporativa
```json
{
  "nombre": "HUSHBOX Enterprise",
  "versi√≥n": "3.2.2",
  "licencia": "MIT",
  "certificado_seguridad": "HBX-SEC-2025-08",
  "soporte": "support@hushbox.com",
  "canales": [
    "Telegram: https://t.me/HUSHBOX_QR",
    "Twitter: https://twitter.com/HUSHBOXonline",
    "Documentaci√≥n: https://docs.hushbox.com"
  ],
  "pol√≠ticas": {
    "privacidad": "https://hushbox.com/privacy",
    "t√©rminos": "https://hushbox.com/terms",
    "reporte_vulnerabilidades": "security@hushbox.com"
  }
}
```

---

## ‚úÖ Conclusi√≥n
HUSHBOX Enterprise es una soluci√≥n de seguridad integral que combina:
- Cifrado de grado militar (AES-256-GCM + PBKDF2)
- Gesti√≥n segura de secretos mediante QR
- Arquitectura zero-server
- Implementaci√≥n PWA para acceso multiplataforma
- Cumplimiento de est√°ndares empresariales

**Enlace de producci√≥n**:  
[https://www.hushbox.online](https://www.hushbox.online)  
**Repositorio GitHub**:  
[https://github.com/MPetovick/HUSHBOX](https://github.com/MPetovick/HUSHBOX)



Claro, aqu√≠ tienes toda la informaci√≥n combinada, mejorada y organizada en un √∫nico documento en formato Markdown. Incluye detalles t√©cnicos, flujo de uso, an√°lisis empresarial, casos de uso y m√°s.

````markdown
# üîí HUSHBOX - Comunicaci√≥n Segura con Encriptaci√≥n QR

**HUSHBOX** es una herramienta de comunicaci√≥n enfocada en la privacidad que combina encriptaci√≥n de grado militar con tecnolog√≠a QR para transmitir mensajes seguros. Est√° dise√±ada para usuarios que valoran la privacidad digital y aplican est√°ndares criptogr√°ficos modernos para proteger las comunicaciones de ojos no autorizados.

---

## üìå Resumen

- **Arquitectura Zero-Server**: Los mensajes nunca pasan por servidores externos.
- **Dise√±o Ef√≠mero**: No hay almacenamiento ni rastreo de mensajes.
- **C√≥digo Abierto**: Transparencia total en la implementaci√≥n de seguridad.
- **PWA Ready**: Aplicaci√≥n web progresiva instalable y usable offline.

---

## üöÄ Caracter√≠sticas Clave

### Seguridad Criptogr√°fica
- Encriptaci√≥n AES-256-GCM con protecci√≥n de integridad HMAC-SHA256.
- Derivaci√≥n de clave con PBKDF2 usando 250,000 iteraciones.
- Payloads comprimidos (DEFLATE) para optimizaci√≥n en QR.
- Protecci√≥n anti fuerza bruta: m√°ximo 5 intentos.
- IV con marca temporal para prevenci√≥n de ataques replay.
- Dise√±o de payload a prueba de manipulaciones.
- Limpieza segura de memoria post-operaci√≥n.

### Experiencia de Usuario
- Dise√±o responsivo, mobile-first.
- Indicadores en tiempo real de fuerza de contrase√±a.
- QR animados con branding personalizado.
- Escaneo QR desde c√°mara en m√≥viles (pr√≥ximamente).
- Integraci√≥n para compartir seguro en redes sociales.
- Exportaci√≥n de mensajes en PDF con instrucciones.

### Avanzadas Protecciones
- Sanitizaci√≥n de memoria y buffers.
- Reglas CSP estrictas para carga segura de scripts.
- Timeouts de sesi√≥n (30 minutos).
- Validaci√≥n contra ataques XSS.
- Compresi√≥n adaptativa para mensajes largos.
- Procesamiento criptogr√°fico en Web Workers.

---

## üõ†Ô∏è Arquitectura T√©cnica

```mermaid
graph TD
    A[Cliente Web] --> B[Interfaz de Usuario]
    B --> C[M√≥dulo de Encriptaci√≥n]
    B --> D[M√≥dulo de Desencriptaci√≥n]
    C --> E[Generaci√≥n QR]
    D --> F[Escaneo QR]
    C --> G[Almacenamiento Local]
    D --> G
    G --> H[Historial de Mensajes]
    C & D --> I[Criptograf√≠a AES-256-GCM]
    I --> J[PBKDF2]
````

### Stack Tecnol√≥gico

| Componente          | Tecnolog√≠a / Versi√≥n           | Prop√≥sito                   |
| ------------------- | ------------------------------ | --------------------------- |
| Encriptaci√≥n        | AES-GCM 256-bit                | Seguridad de mensajes       |
| Derivaci√≥n de clave | PBKDF2-HMAC-SHA256 (250K iter) | Generaci√≥n segura de claves |
| Compresi√≥n          | Pako 2.1.0                     | Compresi√≥n DEFLATE para QR  |
| Generaci√≥n QR       | `qrcode@1.5.1`                 | Crear c√≥digos QR            |
| Decodificaci√≥n QR   | `jsqr@1.4.0`                   | Escanear c√≥digos QR         |
| UI Framework        | CSS Grid/Flex, Font Awesome    | Dise√±o responsivo y iconos  |
| Seguridad de UI     | zxcvbn 4.4.2                   | Validaci√≥n de contrase√±as   |
| PWA Features        | Service Workers                | Funcionalidad offline       |

---

## üîÑ Flujos de Trabajo

### 1. Creaci√≥n y Compartici√≥n Offline

```mermaid
sequenceDiagram
    participant User
    participant HUSHBOX
    participant StorageMedium

    User->>HUSHBOX: Ingresar mensaje y passphrase
    HUSHBOX->>HUSHBOX: Encriptar mensaje + generar QR
    HUSHBOX->>User: Mostrar QR cifrado
    User->>StorageMedium: Guardar/Imprimir QR para backup
    StorageMedium->>User: Recuperar QR cuando sea necesario
    User->>HUSHBOX: Escanear QR + ingresar passphrase
    HUSHBOX->>HUSHBOX: Desencriptar mensaje
    HUSHBOX->>User: Mostrar mensaje claro
```

### 2. Compartici√≥n Offline Entre Usuarios

```mermaid
sequenceDiagram
    participant UserA
    participant HUSHBOX
    participant UserB

    UserA->>HUSHBOX: Escribir mensaje + passphrase
    HUSHBOX->>HUSHBOX: Encriptar y generar QR
    HUSHBOX->>UserA: Mostrar QR cifrado
    UserA->>UserB: Compartir QR f√≠sicamente o digital
    UserB->>HUSHBOX: Escanear QR + ingresar passphrase
    HUSHBOX->>UserB: Mostrar mensaje desencriptado
```

### 3. Compartici√≥n Online con Redes Sociales

```mermaid
sequenceDiagram
    participant UserA
    participant HUSHBOX_A
    participant SocialMedia
    participant HUSHBOX_B
    participant UserB

    UserA->>HUSHBOX_A: Crear mensaje + passphrase
    HUSHBOX_A->>HUSHBOX_A: Encriptar + generar QR
    HUSHBOX_A->>UserA: Mostrar QR cifrado
    UserA->>SocialMedia: Compartir QR (Twitter, Telegram)
    SocialMedia->>UserB: Usuario B recibe QR
    UserB->>HUSHBOX_B: Escanear QR + ingresar passphrase
    HUSHBOX_B->>UserB: Mostrar mensaje desencriptado

    Note over UserA,UserB: Passphrase se comparte v√≠a canal seguro separado (Signal, email cifrado, encuentro f√≠sico)
```

---

## üìã Manual de Usuario Extendido

### Encriptaci√≥n

1. Ingresar passphrase (m√≠nimo 12 caracteres, recomendado 15+).
2. Escribir el mensaje a cifrar (hasta 10,000 caracteres).
3. Presionar "Encrypt".
4. Visualizar QR seguro generado.
5. Opciones para exportar: PDF, copiar QR o compartir.

### Desencriptaci√≥n

1. Escanear QR con c√°mara o subir imagen.
2. Introducir passphrase correcta.
3. Presionar "Decrypt".
4. Ver mensaje descifrado y almacenado en historial.

### Gesti√≥n del Historial

| Funcionalidad | Descripci√≥n                                        |
| ------------- | -------------------------------------------------- |
| Visualizaci√≥n | Mensajes con timestamp de encriptado/desencriptado |
| Exportaci√≥n   | Guardar historial cifrado en CSV con contrase√±a    |
| Importaci√≥n   | Cargar historial cifrado desde CSV                 |
| Eliminaci√≥n   | Borrado seguro con confirmaci√≥n                    |

### Funciones Avanzadas

* Generador de contrase√±as fuertes integrado.
* Modo c√°mara segura: escaneo QR sin guardar im√°genes.
* Sesiones empresariales con timeout y limpieza de datos.
* Personalizaci√≥n corporativa: branding y dominio propio.

---

## üíº An√°lisis Empresarial

### Propuesta de Valor

* Comunicaci√≥n empresarial segura sin puntos vulnerables.
* Cero almacenamiento en servidores.
* Eliminaci√≥n de metadatos.
* Cumplimiento regulatorio (GDPR, HIPAA).
* Arquitectura h√≠brida QR + passphrase para doble factor de posesi√≥n.

### Modelo de Negocio

| Plan         | Caracter√≠sticas                                           | Precio               |
| ------------ | --------------------------------------------------------- | -------------------- |
| Starter      | Encriptaci√≥n b√°sica, 50 mensajes/mes                      | Gratis               |
| Professional | Historial ilimitado, exportaci√≥n PDF, soporte prioritario | \$29 / usuario / mes |
| Enterprise   | SSO, auditor√≠as, API integraci√≥n, gesti√≥n centralizada    | Precio personalizado |

### Mercado Objetivo

* Sector Financiero (bancos, fondos).
* Sector Salud (hospitales, cl√≠nicas).
* Sector Legal (despachos, notar√≠as).
* Gobierno (agencias, fuerzas de seguridad).
* Tecnolog√≠a (protecci√≥n de propiedad intelectual).

### Ventajas Competitivas

* Arquitectura zero-server que elimina brechas.
* Certificaci√≥n HBX-SEC-2025-08.
* Doble factor QR + passphrase.
* PWA multi-dispositivo.
* Soporte empresarial con SLA 24/7.

---

## üìö Casos de Uso

### Corporativo: Transferencia Segura de Fondos

* Director financiero encripta detalles con passphrase de un solo uso.
* Env√≠a QR v√≠a email y passphrase v√≠a SMS.
* Aprobaci√≥n segura sin riesgo de intercepci√≥n.

### M√©dico: Compartici√≥n de Diagn√≥sticos Sensibles

* Onc√≥logo genera QR con resultados y passphrase temporal.
* Paciente recibe documento impreso con QR.
* Cumple HIPAA, evita registros digitales permanentes.

### Legal: Transmisi√≥n de Documentos Confidenciales

* Abogado convierte cl√°usulas sensibles a QR.
* Documento f√≠sico con QR es transportado.
* Receptor desencripta con passphrase acordada.

### Personal: Protecci√≥n de Identidad

* Periodista crea mensajes cifrados en QR.
* Publica QR en redes sociales.
* Fuente accede con passphrase via canal seguro.
* Comunicaci√≥n sin metadatos ni rastreo.

---

## ‚ö†Ô∏è Consideraciones de Seguridad

### Buenas Pr√°cticas

* Usar passphrases de 15+ caracteres.
* Compartir passphrase solo por canales seguros y separados.
* Verificar fuente de QR antes de escanear.
* Limitar intentos de desencriptaci√≥n.
* Utilizar sesiones privadas o navegaci√≥n incognito.

### Implementaci√≥n

* Borrado seguro de memoria tras operaciones.
* Generaci√≥n de nonce con timestamp.
* Protecci√≥n contra side-channels en compresi√≥n.
* Manejo seguro de errores y excepciones.
* Cumplimiento estricto de Content Security Policy.

---

## üîê Pol√≠tica y Certificaciones

* Rotaci√≥n autom√°tica de claves cada 90 d√≠as.
* Auditor√≠as trimestrales de seguridad.
* Programa de recompensas por vulnerabilidades (hasta \$50,000).
* Cumplimiento GDPR, HIPAA, SOC 2 Tipo II.
* Certificaciones: HBX-SEC-2025-08, NIST 800-63B, FIPS 140-2, ISO 27001.

---

## üì• Instalaci√≥n & Uso

### Local

```bash
git clone https://github.com/MPetovick/HUSHBOX.git
cd HUSHBOX
python3 -m http.server 8000
```

Abrir en navegador moderno: `http://localhost:8000`

### Web Online

[https://www.hushbox.online](https://mpetovick.github.io/HUSHBOX)

---

## üåê Contacto & Comunidad

* Telegram: [@HUSHBOX\_QR](https://t.me/HUSHBOX_QR)
* Twitter: [@HUSHBOXonline](https://twitter.com/HUSHBOXonline)
* Soporte: [support@hushbox.com](mailto:support@hushbox.com)

---

**HUSHBOX** ‚Äî Tu b√≥veda digital de privacidad üîè
Porque tus secretos merecen m√°s que la nube ‚òÅÔ∏è‚úî

```

---
sequenceDiagram
    participant UserA
    participant HUSHBOX_A
    participant SocialMedia
    participant HUSHBOX_B
    participant UserB

    UserA->>HUSHBOX_A: Crear mensaje + passphrase
    HUSHBOX_A->>HUSHBOX_A: Encriptar + generar QR
    HUSHBOX_A->>UserA: Mostrar QR cifrado
    UserA->>SocialMedia: Compartir QR (Twitter, Telegram)
    SocialMedia->>UserB: Usuario B recibe QR
    UserB->>HUSHBOX_B: Escanear QR + ingresar passphrase
    HUSHBOX_B->>UserB: Mostrar mensaje desencriptado

    Note over UserA,UserB: Passphrase se comparte v√≠a canal seguro separado (Signal, email cifrado, encuentro f√≠sico)

